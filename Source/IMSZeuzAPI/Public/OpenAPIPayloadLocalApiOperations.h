/**
 * Payload Local API
 * The Payload Local API available in your running payloads. It provides an interface between your game server and the IMS zeuz orchestration service.  # Warning The Payload Local API is starting up at the same time as your game server, and may not be initially available. Use a retry mechanism to ensure the request is successful.  # OpenAPI Best practices The Payload local API is using the OpenAPI standard, it is advised to use an OpenAPI client generator for the language your game server uses. See a [list of OpenAPI client generators](https://openapi-generator.tech/docs/generators/).  # Address The Payload Local API address can be obtained using an environment variable: `http://${ORCHESTRATION_PAYLOAD_API}`.  # Authentication As the Payload Local API is only accessible from within the payload, it does not require authentication. 
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIPayloadLocalApi.h"

#include "OpenAPIErrorResponseV0.h"
#include "OpenAPIGetPayloadResponseV0.h"
#include "OpenAPISetAnnotationRequestV0.h"
#include "OpenAPISetLabelRequestV0.h"

namespace IMSZeuzAPI
{

/* Get Payload details
 *
 * Retrieve details of the current payload, including metadata and status
*/
class IMSZEUZAPI_API OpenAPIPayloadLocalApi::GetPayloadV0Request : public Request
{
public:
    virtual ~GetPayloadV0Request() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class IMSZEUZAPI_API OpenAPIPayloadLocalApi::GetPayloadV0Response : public Response
{
public:
    virtual ~GetPayloadV0Response() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIGetPayloadResponseV0 Content;
};

/* Payload is Ready
 *
 * Call when the GameServer is ready to accept connections
*/
class IMSZEUZAPI_API OpenAPIPayloadLocalApi::ReadyV0Request : public Request
{
public:
    virtual ~ReadyV0Request() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class IMSZEUZAPI_API OpenAPIPayloadLocalApi::ReadyV0Response : public Response
{
public:
    virtual ~ReadyV0Response() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Add Payload Annotation
 *
 * Add an Annotation to the current Payload
*/
class IMSZEUZAPI_API OpenAPIPayloadLocalApi::SetAnnotationV0Request : public Request
{
public:
    virtual ~SetAnnotationV0Request() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	TOptional<OpenAPISetAnnotationRequestV0> OpenAPISetAnnotationRequestV0;
};

class IMSZEUZAPI_API OpenAPIPayloadLocalApi::SetAnnotationV0Response : public Response
{
public:
    virtual ~SetAnnotationV0Response() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Add Payload Label
 *
 * Add a Label to the current Payload
*/
class IMSZEUZAPI_API OpenAPIPayloadLocalApi::SetLabelV0Request : public Request
{
public:
    virtual ~SetLabelV0Request() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	TOptional<OpenAPISetLabelRequestV0> OpenAPISetLabelRequestV0;
};

class IMSZEUZAPI_API OpenAPIPayloadLocalApi::SetLabelV0Response : public Response
{
public:
    virtual ~SetLabelV0Response() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

}
