/**
 * Payload Local API
 * The Payload Local API available in your running payloads. It provides an interface between your game server and the IMS zeuz orchestration service.  # Warning The Payload Local API is starting up at the same time as your game server, and may not be initially available. Use a retry mechanism to ensure the request is successful.  # OpenAPI Best practices The Payload local API is using the OpenAPI standard, it is advised to use an OpenAPI client generator for the language your game server uses. See a [list of OpenAPI client generators](https://openapi-generator.tech/docs/generators/).  # Address The Payload Local API address can be obtained using an environment variable: `http://${ORCHESTRATION_PAYLOAD_API}`.  # Authentication As the Payload Local API is only accessible from within the payload, it does not require authentication. 
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPISessionManagerLocalApi.h"

#include "OpenAPISessionConfigV0.h"

namespace IMSZeuzAPI
{

/* Retrieve Session Status

*/
class IMSZEUZAPI_API OpenAPISessionManagerLocalApi::ApiV0SessionManagerStatusGetRequest : public Request
{
public:
    virtual ~ApiV0SessionManagerStatusGetRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class IMSZEUZAPI_API OpenAPISessionManagerLocalApi::ApiV0SessionManagerStatusGetResponse : public Response
{
public:
    virtual ~ApiV0SessionManagerStatusGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TMap<FString, FString> Content;
};

/* Set Session Status

*/
class IMSZEUZAPI_API OpenAPISessionManagerLocalApi::ApiV0SessionManagerStatusPostRequest : public Request
{
public:
    virtual ~ApiV0SessionManagerStatusPostRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	TOptional<TMap<FString, FString>> RequestBody;
};

class IMSZEUZAPI_API OpenAPISessionManagerLocalApi::ApiV0SessionManagerStatusPostResponse : public Response
{
public:
    virtual ~ApiV0SessionManagerStatusPostResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Retrieve Session Config
 *
 * Retrieves the Session Config that was set by the Game Client when creating the session
*/
class IMSZEUZAPI_API OpenAPISessionManagerLocalApi::GetSessionConfigV0Request : public Request
{
public:
    virtual ~GetSessionConfigV0Request() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class IMSZEUZAPI_API OpenAPISessionManagerLocalApi::GetSessionConfigV0Response : public Response
{
public:
    virtual ~GetSessionConfigV0Response() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPISessionConfigV0 Content;
};

}
