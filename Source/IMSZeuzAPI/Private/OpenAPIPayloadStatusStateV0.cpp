/**
 * Payload Local API
 * The Payload Local API available in your running payloads. It provides an interface between your game server and the IMS zeuz orchestration service.  # Warning The Payload Local API is starting up at the same time as your game server, and may not be initially available. Use a retry mechanism to ensure the request is successful.  # OpenAPI Best practices The Payload local API is using the OpenAPI standard, it is advised to use an OpenAPI client generator for the language your game server uses. See a [list of OpenAPI client generators](https://openapi-generator.tech/docs/generators/).  # Address The Payload Local API address can be obtained using an environment variable: `http://${ORCHESTRATION_PAYLOAD_API}`.  # Authentication As the Payload Local API is only accessible from within the payload, it does not require authentication. 
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIPayloadStatusStateV0.h"

#include "IMSZeuzAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace IMSZeuzAPI
{

inline FString ToString(const OpenAPIPayloadStatusStateV0::Values& Value)
{
	switch (Value)
	{
	case OpenAPIPayloadStatusStateV0::Values::Unknown:
		return TEXT("Unknown");
	case OpenAPIPayloadStatusStateV0::Values::Creating:
		return TEXT("Creating");
	case OpenAPIPayloadStatusStateV0::Values::Starting:
		return TEXT("Starting");
	case OpenAPIPayloadStatusStateV0::Values::Ready:
		return TEXT("Ready");
	case OpenAPIPayloadStatusStateV0::Values::Reserved:
		return TEXT("Reserved");
	case OpenAPIPayloadStatusStateV0::Values::Shutdown:
		return TEXT("Shutdown");
	case OpenAPIPayloadStatusStateV0::Values::Error:
		return TEXT("Error");
	case OpenAPIPayloadStatusStateV0::Values::Unhealthy:
		return TEXT("Unhealthy");
	}

	UE_LOG(LogIMSZeuzAPI, Error, TEXT("Invalid OpenAPIPayloadStatusStateV0::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIPayloadStatusStateV0::EnumToString(const OpenAPIPayloadStatusStateV0::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIPayloadStatusStateV0::Values& Value)
{
	static TMap<FString, OpenAPIPayloadStatusStateV0::Values> StringToEnum = { 
		{ TEXT("Unknown"), OpenAPIPayloadStatusStateV0::Values::Unknown },
		{ TEXT("Creating"), OpenAPIPayloadStatusStateV0::Values::Creating },
		{ TEXT("Starting"), OpenAPIPayloadStatusStateV0::Values::Starting },
		{ TEXT("Ready"), OpenAPIPayloadStatusStateV0::Values::Ready },
		{ TEXT("Reserved"), OpenAPIPayloadStatusStateV0::Values::Reserved },
		{ TEXT("Shutdown"), OpenAPIPayloadStatusStateV0::Values::Shutdown },
		{ TEXT("Error"), OpenAPIPayloadStatusStateV0::Values::Error },
		{ TEXT("Unhealthy"), OpenAPIPayloadStatusStateV0::Values::Unhealthy }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIPayloadStatusStateV0::EnumFromString(const FString& EnumAsString, OpenAPIPayloadStatusStateV0::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIPayloadStatusStateV0::Values& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIPayloadStatusStateV0::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIPayloadStatusStateV0::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIPayloadStatusStateV0::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIPayloadStatusStateV0::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
